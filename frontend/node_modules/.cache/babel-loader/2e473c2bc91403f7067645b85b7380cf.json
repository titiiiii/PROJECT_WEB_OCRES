{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  var _playingTrack;\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [image, setImage] = useState(\"\");\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    /*spotifyApi.searchTracks(search).then(res =>{\r\n        if(cancel) return\r\n       \r\n        console.log(res.body.tracks.items[0].album.images[0].url)\r\n        setImage( res.body.tracks.items[0].album.images[0].url)*/\n\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"search\",\n    placeholder: \"Search Songs/Artists\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-grow-1 my-2\",\n    style: {\n      overflowY: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, searchResults.map(track => /*#__PURE__*/React.createElement(TrackSearchResult, {\n    track: track,\n    key: track.uri,\n    chooseTrack: chooseTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  })), searchResults.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    style: {\n      whiteSpace: \"pre\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, lyrics)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    accessToken: accessToken,\n    trackUri: (_playingTrack = playingTrack) === null || _playingTrack === void 0 ? void 0 : _playingTrack.uri,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","Player","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","image","setImage","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","track","smallestAlbumImage","album","images","reduce","smallest","height","artist","artists","name","title","uri","albumUrl","url","e","target","value","overflowY","chooseTrack","length","whiteSpace","lyrics","playingTrack"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\";\r\nimport Player from \"./components/Player\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [image, setImage] = useState(\"\")\r\n\r\n    \r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n        /*spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return\r\n           \r\n            console.log(res.body.tracks.items[0].album.images[0].url)\r\n            setImage( res.body.tracks.items[0].album.images[0].url)*/\r\n\r\n            spotifyApi.searchTracks(search).then(res => {\r\n                if (cancel) return\r\n                setSearchResults(\r\n                  res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                      (smallest, image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                      },\r\n                      track.album.images[0]\r\n                    )\r\n          \r\n                    return {\r\n                      artist: track.artists[0].name,\r\n                      title: track.name,\r\n                      uri: track.uri,\r\n                      albumUrl: smallestAlbumImage.url,\r\n                    }\r\n                  })\r\n                )\r\n              })\r\n        \r\n        return () => cancel = true\r\n    }, [search, accessToken])\r\n\r\n    return (\r\n        <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\r\n          <Form.Control\r\n            type=\"search\"\r\n            placeholder=\"Search Songs/Artists\"\r\n            value={search}\r\n            onChange={e => setSearch(e.target.value)}\r\n          />\r\n          <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n            {searchResults.map(track => (\r\n              <TrackSearchResult\r\n                track={track}\r\n                key={track.uri}\r\n                chooseTrack={chooseTrack}\r\n              />\r\n            ))}\r\n            {searchResults.length === 0 && (\r\n              <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\r\n                {lyrics}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n          </div>\r\n        </Container>\r\n      )\r\n}\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}