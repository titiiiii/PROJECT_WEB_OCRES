{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Affichage from \"./components/Affichage\";\nimport Album from \"./components/Widgets/Album\";\nimport { Container, Form } from \"react-bootstrap\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nimport PlayMe from \"./components/Widgets/PlayMe\";\nimport Home from \"./page/home/Home\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState(\"\");\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  console.log(\"search: \", playingTrack);\n  return /*#__PURE__*/React.createElement(Affichage, {\n    accessToken: accessToken,\n    search: search,\n    setSearch: setSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","SpotifyWebApi","Affichage","Album","Container","Form","TrackSearchResult","Player","PlayMe","Home","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","chooseTrack","track","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Affichage from \"./components/Affichage\";\r\nimport Album from \"./components/Widgets/Album\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\"\r\nimport Player from \"./components/Player\"\r\nimport PlayMe from \"./components/Widgets/PlayMe\";\r\nimport Home from \"./page/home/Home\";\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingTrack] = useState(\"\")\r\n\r\n\r\n    \r\n\r\n  \r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n    }\r\n    \r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return           \r\n            \r\n           \r\n                setSearchResults(\r\n                  res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                      (smallest, image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                      },\r\n                      track.album.images[0]\r\n                    )\r\n          \r\n                    return {\r\n                      artist: track.artists[0].name,\r\n                      title: track.name,\r\n                      uri: track.uri,\r\n                      albumUrl: smallestAlbumImage.url,\r\n                    }\r\n                  })\r\n                )\r\n              })\r\n        \r\n        return () => cancel = true\r\n    }, [search, accessToken])\r\n    \r\n\r\n   \r\n    console.log(\"search: \", playingTrack)\r\n    return (\r\n      <Affichage accessToken={accessToken} search={search} setSearch={setSearch}/>\r\n  )      \r\n      \r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}