{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Affichage from \"./components/Affichage\";\nimport Album from \"./components/Widgets/Album\";\nimport { Container, Form } from \"react-bootstrap\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [image, setImage] = useState(\"\");\n  const [playingTrack, setPlayingTrack] = useState();\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n  /*useEffect(() =>{\r\n      if(!accessToken) return\r\n      spotifyApi.setAccessToken(accessToken)\r\n  }, [accessToken])\r\n  \r\n  useEffect(() =>{\r\n      if(!search) return setSearchResults([])\r\n      if(!accessToken) return\r\n        let cancel = false\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n          if(cancel) return\r\n         \r\n          /*console.log(res.body.tracks.items[0].album.images[0].url)\r\n          setImage( res.body.tracks.items[0].album.images[0].url)\r\n         \r\n              setSearchResults(\r\n                res.body.tracks.items.map(track => {\r\n                  const smallestAlbumImage = track.album.images.reduce(\r\n                    (smallest, image) => {\r\n                      if (image.height < smallest.height) return image\r\n                      return smallest\r\n                    },\r\n                    track.album.images[0]\r\n                  )\r\n        \r\n                  return {\r\n                    artist: track.artists[0].name,\r\n                    title: track.name,\r\n                    uri: track.uri,\r\n                    albumUrl: smallestAlbumImage.url,\r\n                  }\r\n                })\r\n              )\r\n            })\r\n      \r\n      return () => cancel = true\r\n  }, [search, accessToken])*/\n\n\n  return /*#__PURE__*/React.createElement(Affichage, {\n    accessToken: accessToken,\n    trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","SpotifyWebApi","Affichage","Album","Container","Form","TrackSearchResult","Player","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","image","setImage","playingTrack","setPlayingTrack","chooseTrack","track","uri"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAIA,MAAMC,UAAU,GAAG,IAAIP,aAAJ,CAAkB;AACpCQ,EAAAA,QAAQ,EAAE;AAD0B,CAAlB,CAAnB;;AAIA,SAASC,SAAT,OAA2B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAEvB,QAAMC,WAAW,GAAGd,OAAO,CAACa,IAAD,CAA3B;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,EAAhD;;AAEA,WAASsB,WAAT,CAAqBC,KAArB,EAA4B;AACxBF,IAAAA,eAAe,CAACE,KAAD,CAAf;AACAR,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH;AAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMI,sBACE,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEF,WAAxB;AAAqC,IAAA,QAAQ,EAAEO,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEI,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAIH;;AAED,eAAeb,SAAf","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Affichage from \"./components/Affichage\";\r\nimport Album from \"./components/Widgets/Album\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\"\r\nimport Player from \"./components/Player\"\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [image, setImage] = useState(\"\")\r\n    const [playingTrack, setPlayingTrack] = useState()\r\n\r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n    }\r\n\r\n    \r\n    \r\n    /*useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return\r\n           \r\n            /*console.log(res.body.tracks.items[0].album.images[0].url)\r\n            setImage( res.body.tracks.items[0].album.images[0].url)\r\n           \r\n                setSearchResults(\r\n                  res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                      (smallest, image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                      },\r\n                      track.album.images[0]\r\n                    )\r\n          \r\n                    return {\r\n                      artist: track.artists[0].name,\r\n                      title: track.name,\r\n                      uri: track.uri,\r\n                      albumUrl: smallestAlbumImage.url,\r\n                    }\r\n                  })\r\n                )\r\n              })\r\n        \r\n        return () => cancel = true\r\n    }, [search, accessToken])*/\r\n\r\n   \r\n\r\n    return (\r\n      <Affichage accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n  )      \r\n      \r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}