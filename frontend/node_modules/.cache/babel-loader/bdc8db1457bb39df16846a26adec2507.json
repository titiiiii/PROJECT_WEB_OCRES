{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [image, setImage] = useState(\"\");\n  const [playingTrack, setPlayingTrack] = useState();\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!searchResults) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n      /*  spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return\r\n            res.body.tracks.items.map(track =>{})\r\n           \r\n            console.log(res.body.tracks.items[0].album.images[0].url)\r\n              setImage( res.body.tracks.items[0].album.images[0].url)*/\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"search\",\n    placeholder: \"Search Songs/Artists\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    alt: \"new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","Player","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","image","setImage","playingTrack","setPlayingTrack","chooseTrack","track","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","height","artist","artists","name","title","uri","albumUrl","url","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\";\r\nimport Player from \"./components/Player\";\r\n\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [image, setImage] = useState(\"\")\r\n    const [playingTrack, setPlayingTrack] = useState()\r\n\r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n    }\r\n\r\n    \r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!searchResults) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n       spotifyApi.searchTracks(search).then(res => {\r\n            if (cancel) return\r\n            setSearchResults(\r\n              res.body.tracks.items.map(track => {\r\n                const smallestAlbumImage = track.album.images.reduce(\r\n                  (smallest, image) => {\r\n                    if (image.height < smallest.height) return image\r\n                    return smallest\r\n                  },\r\n                  track.album.images[0]\r\n                )\r\n      \r\n                return {\r\n                  artist: track.artists[0].name,\r\n                  title: track.name,\r\n                  uri: track.uri,\r\n                  albumUrl: smallestAlbumImage.url,\r\n                }\r\n              })\r\n            )\r\n          \r\n\r\n      /*  spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return\r\n            res.body.tracks.items.map(track =>{})\r\n           \r\n            console.log(res.body.tracks.items[0].album.images[0].url)\r\n              setImage( res.body.tracks.items[0].album.images[0].url)*/\r\n        })\r\n        \r\n        return () => cancel = true\r\n    }, [search, accessToken])\r\n\r\n    return (\r\n        <Container>            \r\n            <Form.Control type=\"search\"\r\n             placeholder=\"Search Songs/Artists\"\r\n             value={search}\r\n             onChange = {e => setSearch(e.target.value)}  /> \r\n                <div>\r\n                    \r\n                    <img \r\n                    src={image}\r\n                    alt=\"new\"\r\n                    />\r\n                </div>     \r\n                <div>\r\n                </div>     \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}