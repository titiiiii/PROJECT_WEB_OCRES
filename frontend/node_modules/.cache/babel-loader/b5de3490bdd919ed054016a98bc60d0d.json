{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Affichage from \"./components/Affichage\";\nimport Home from \"./page/home/Home\";\nimport axios from \"axios\";\nimport TrackSearchResult from './components/TrackSearchResult';\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState(\"\");\n  const [titre, setTitre] = useState([]);\n  const [artist, setArtist] = useState([]);\n  const [lyrics, setLyrics] = useState(\"\");\n  const track = track;\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n    setLyrics(\"\");\n  }\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.titre,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]);\n  console.log(\"CT :\", chooseTrack);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      const searchInApi = res.body.tracks.items[0];\n      console.log(\"data:\", res); //Affichage de l'API dans la console   \n\n      setPlayingTrack(searchInApi.uri);\n      setTitre(searchInApi.name);\n      setArtist(searchInApi.artists[0].name);\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TrackSearchResult, {\n    track: track,\n    playingTrack: playingTrack,\n    chooseTrack: chooseTrack,\n    lyrics: lyrics,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Affichage, {\n    accessToken: accessToken,\n    search: search,\n    setSearch: setSearch,\n    playingTrack: playingTrack,\n    titre: titre,\n    artist: artist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","SpotifyWebApi","Affichage","Home","axios","TrackSearchResult","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","titre","setTitre","artist","setArtist","lyrics","setLyrics","track","chooseTrack","get","params","then","res","data","console","log","setAccessToken","cancel","searchTracks","searchInApi","body","tracks","items","uri","name","artists"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Affichage from \"./components/Affichage\";\r\nimport Home from \"./page/home/Home\";\r\nimport axios from \"axios\";\r\nimport TrackSearchResult from './components/TrackSearchResult'\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingTrack] = useState(\"\")\r\n    const [titre, setTitre] = useState([])\r\n    const [artist, setArtist] = useState([])\r\n    const [lyrics, setLyrics] = useState(\"\")\r\n\r\n    const track = track\r\n    \r\n\r\n  \r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n        setLyrics(\"\")\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (!playingTrack) return\r\n    \r\n        axios\r\n          .get(\"http://localhost:3001/lyrics\", {\r\n            params: {\r\n              track: playingTrack.titre,\r\n              artist: playingTrack.artist,\r\n            },\r\n          })\r\n          .then(res => {\r\n            setLyrics(res.data.lyrics)\r\n          })\r\n      }, [playingTrack])\r\n\r\n      console.log(\"CT :\", chooseTrack)\r\n\r\n\r\n    \r\n\r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n          if(cancel) return\r\n\r\n      const searchInApi = res.body.tracks.items[0]\r\n      \r\n      console.log(\"data:\", res)     //Affichage de l'API dans la console   \r\n      setPlayingTrack(searchInApi.uri)\r\n      setTitre(searchInApi.name)\r\n      setArtist(searchInApi.artists[0].name)\r\n      \r\n      })\r\n      \r\n\r\n  return () => cancel = true    \r\n  }, [search, accessToken])\r\n    \r\n\r\n   \r\n    return (\r\n        <div>\r\n            <div>\r\n            <TrackSearchResult track={track} playingTrack={playingTrack} chooseTrack={chooseTrack} lyrics={lyrics}/>\r\n            </div>\r\n        \r\n      <Affichage accessToken={accessToken} search={search} setSearch={setSearch} playingTrack={playingTrack} \r\n      titre={titre} artist={artist}/>\r\n      </div>\r\n    )\r\n      \r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}