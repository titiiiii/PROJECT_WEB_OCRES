{"ast":null,"code":"var _jsxFileName = \"C:\\\\thib\\\\ECE\\\\ing4\\\\web\\\\SaveProjetWeb\\\\frontend\\\\src\\\\components\\\\Player.js\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport React from \"react\";\n\nfunction Player(_ref) {\n  let {\n    accessToken,\n    playingTrack\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [playingTrack]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/React.createElement(SpotifyPlayer, {\n    width: \"50%\",\n    token: accessToken,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: play,\n    uris: playingTrack ? [playingTrack] : [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default Player;","map":{"version":3,"sources":["C:/thib/ECE/ing4/web/SaveProjetWeb/frontend/src/components/Player.js"],"names":["useState","useEffect","SpotifyPlayer","React","Player","accessToken","playingTrack","play","setPlay","state","isPlaying"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEC,SAASC,MAAT,OAA8C;AAAA,MAA9B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAA8B;AAE7C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMO,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,YAAD,CAAtB,CAAT;AAEA,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,KADR;AAEE,IAAA,KAAK,EAAEA,WAFT;AAGE,IAAA,YAAY,MAHd;AAIE,IAAA,QAAQ,EAAEI,KAAK,IAAI;AACjB,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBF,OAAO,CAAC,KAAD,CAAP;AACvB,KANH;AAOG,IAAA,IAAI,EAAED,IAPT;AAQG,IAAA,IAAI,EAAED,YAAY,GAAG,CAACA,YAAD,CAAH,GAAoB,EARzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD;;AAED,eAAeF,MAAf","sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport SpotifyPlayer from \"react-spotify-web-playback\"\r\nimport React from \"react\"\r\n\r\n function Player({ accessToken, playingTrack}) {\r\n\r\n  const [play, setPlay] = useState(false)\r\n\r\n  useEffect(() => setPlay(true), [playingTrack])\r\n\r\n  if (!accessToken) return null\r\n  return (\r\n    <SpotifyPlayer \r\n      width=\"50%\"\r\n      token={accessToken}\r\n      showSaveIcon\r\n      callback={state => {\r\n        if (!state.isPlaying) setPlay(false)\r\n      }}\r\n       play={play}\r\n       uris={playingTrack ? [playingTrack] : []}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Player"]},"metadata":{},"sourceType":"module"}