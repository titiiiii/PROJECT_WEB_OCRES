{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Affichage from \"./components/Affichage\";\nimport Album from \"./components/Widgets/Album\";\nimport { Container, Form } from \"react-bootstrap\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nimport PlayMe from \"./components/Widgets/PlayMe\";\nimport Home from \"./page/home/Home\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState(\"\");\n  const [titre, setTitre] = useState([]);\n  const [artist, setArtist] = useState([]);\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      const searchInApi = res.body.tracks.items[0];\n      console.log(\"data:\", res); //Affichage de l'API dans la console   \n\n      setPlayingTrack(searchInApi.uri);\n      setTitre(searchInApi.name);\n      setArtist(searchInApi.artists);\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/React.createElement(Affichage, {\n    accessToken: accessToken,\n    search: search,\n    setSearch: setSearch,\n    playingTrack: playingTrack,\n    titre: titre,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","SpotifyWebApi","Affichage","Album","Container","Form","TrackSearchResult","Player","PlayMe","Home","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","titre","setTitre","artist","setArtist","chooseTrack","track","setAccessToken","cancel","searchTracks","then","res","searchInApi","body","tracks","items","console","log","uri","name","artists"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AAIA,MAAMC,UAAU,GAAG,IAAIT,aAAJ,CAAkB;AACpCU,EAAAA,QAAQ,EAAE;AAD0B,CAAlB,CAAnB;;AAIA,SAASC,SAAT,OAA2B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAEvB,QAAMC,WAAW,GAAGhB,OAAO,CAACe,IAAD,CAA3B;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,EAAD,CAApC;;AAMA,WAAS0B,WAAT,CAAqBC,KAArB,EAA4B;AACxBN,IAAAA,eAAe,CAACM,KAAD,CAAf;AACAV,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH;;AAEDhB,EAAAA,SAAS,CAAC,MAAK;AACX,QAAG,CAACc,WAAJ,EAAiB;AACjBJ,IAAAA,UAAU,CAACiB,cAAX,CAA0Bb,WAA1B;AACH,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;AAKAd,EAAAA,SAAS,CAAC,MAAK;AACX,QAAG,CAACe,MAAJ,EAAY,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACZ,QAAG,CAACJ,WAAJ,EAAiB;AAEjB,QAAIc,MAAM,GAAG,KAAb;AAEAlB,IAAAA,UAAU,CAACmB,YAAX,CAAwBd,MAAxB,EAAgCe,IAAhC,CAAqCC,GAAG,IAAG;AACzC,UAAGH,MAAH,EAAW;AAEf,YAAMI,WAAW,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,KAAhB,CAAsB,CAAtB,CAApB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,GAArB,EAL6C,CAKf;;AAC9BX,MAAAA,eAAe,CAACY,WAAW,CAACM,GAAb,CAAf;AACAhB,MAAAA,QAAQ,CAACU,WAAW,CAACO,IAAb,CAAR;AACAf,MAAAA,SAAS,CAACQ,WAAW,CAACQ,OAAb,CAAT;AAGC,KAXC;AAcN,WAAO,MAAMZ,MAAM,GAAG,IAAtB;AACC,GArBU,EAqBR,CAACb,MAAD,EAASD,WAAT,CArBQ,CAAT;AAyBA,sBACE,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEA,WAAxB;AAAqC,IAAA,MAAM,EAAEC,MAA7C;AAAqD,IAAA,SAAS,EAAEC,SAAhE;AAA2E,IAAA,YAAY,EAAEG,YAAzF;AACA,IAAA,KAAK,EAAEE,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKH;;AAED,eAAeT,SAAf","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Affichage from \"./components/Affichage\";\r\nimport Album from \"./components/Widgets/Album\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\"\r\nimport Player from \"./components/Player\"\r\nimport PlayMe from \"./components/Widgets/PlayMe\";\r\nimport Home from \"./page/home/Home\";\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingTrack] = useState(\"\")\r\n    const [titre, setTitre] = useState([])\r\n    const [artist, setArtist] = useState([])\r\n\r\n\r\n    \r\n\r\n  \r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n    }\r\n    \r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n          if(cancel) return\r\n\r\n      const searchInApi = res.body.tracks.items[0]\r\n      \r\n      console.log(\"data:\", res)     //Affichage de l'API dans la console   \r\n      setPlayingTrack(searchInApi.uri)\r\n      setTitre(searchInApi.name)\r\n      setArtist(searchInApi.artists)\r\n\r\n      \r\n      })\r\n      \r\n\r\n  return () => cancel = true    \r\n  }, [search, accessToken])\r\n    \r\n\r\n   \r\n    return (\r\n      <Affichage accessToken={accessToken} search={search} setSearch={setSearch} playingTrack={playingTrack} \r\n      titre={titre}/>\r\n  )      \r\n      \r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}