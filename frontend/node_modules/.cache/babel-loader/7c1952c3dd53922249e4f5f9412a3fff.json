{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\33616\\\\Documents\\\\GitHub\\\\TP2-WEB\\\\SaveProjetWeb\\\\frontend\\\\src\\\\Dashboard.js\";\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Affichage from \"./components/Affichage\";\nimport Album from \"./components/Widgets/Album\";\nimport { Container, Form } from \"react-bootstrap\";\nimport TrackSearchResult from \"./components/TrackSearchResult\";\nimport Player from \"./components/Player\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"6bc52007f6114854ad75a84a1d119b23\"\n});\n\nfunction Dashboard(_ref) {\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [image, setImage] = useState(\"\");\n  const [playingTrack, setPlayingTrack] = useState();\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      /*console.log(res.body.tracks.items[0].album.images[0].url)\r\n      setImage( res.body.tracks.items[0].album.images[0].url)*/\n\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"search\",\n    placeholder: \"Search Songs/Artists\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-grow-1 my-2\",\n    style: {\n      overflowY: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, searchResults.map(track => /*#__PURE__*/React.createElement(TrackSearchResult, {\n    track: track,\n    key: track.uri,\n    chooseTrack: chooseTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Player, {\n    accessToken: accessToken,\n    trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  })));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/33616/Documents/GitHub/TP2-WEB/SaveProjetWeb/frontend/src/Dashboard.js"],"names":["React","useAuth","useState","useEffect","SpotifyWebApi","Affichage","Album","Container","Form","TrackSearchResult","Player","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","image","setImage","playingTrack","setPlayingTrack","chooseTrack","track","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","height","artist","artists","name","title","uri","albumUrl","url","e","target","value","overflowY"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAIA,MAAMC,UAAU,GAAG,IAAIP,aAAJ,CAAkB;AACpCQ,EAAAA,QAAQ,EAAE;AAD0B,CAAlB,CAAnB;;AAIA,SAASC,SAAT,OAA2B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAEvB,QAAMC,WAAW,GAAGd,OAAO,CAACa,IAAD,CAA3B;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,EAAhD;;AAEA,WAASsB,WAAT,CAAqBC,KAArB,EAA4B;AACxBF,IAAAA,eAAe,CAACE,KAAD,CAAf;AACAR,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH;;AAIDd,EAAAA,SAAS,CAAC,MAAK;AACX,QAAG,CAACY,WAAJ,EAAiB;AACjBJ,IAAAA,UAAU,CAACe,cAAX,CAA0BX,WAA1B;AACH,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;AAKAZ,EAAAA,SAAS,CAAC,MAAK;AACX,QAAG,CAACa,MAAJ,EAAY,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACZ,QAAG,CAACJ,WAAJ,EAAiB;AAEjB,QAAIY,MAAM,GAAG,KAAb;AAEAhB,IAAAA,UAAU,CAACiB,YAAX,CAAwBZ,MAAxB,EAAgCa,IAAhC,CAAqCC,GAAG,IAAG;AACvC,UAAGH,MAAH,EAAW;AAEX;AACZ;;AAEgBR,MAAAA,gBAAgB,CACdW,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BT,KAAK,IAAI;AACjC,cAAMU,kBAAkB,GAAGV,KAAK,CAACW,KAAN,CAAYC,MAAZ,CAAmBC,MAAnB,CACzB,CAACC,QAAD,EAAWnB,KAAX,KAAqB;AACnB,cAAIA,KAAK,CAACoB,MAAN,GAAeD,QAAQ,CAACC,MAA5B,EAAoC,OAAOpB,KAAP;AACpC,iBAAOmB,QAAP;AACD,SAJwB,EAKzBd,KAAK,CAACW,KAAN,CAAYC,MAAZ,CAAmB,CAAnB,CALyB,CAA3B;AAQA,eAAO;AACLI,UAAAA,MAAM,EAAEhB,KAAK,CAACiB,OAAN,CAAc,CAAd,EAAiBC,IADpB;AAELC,UAAAA,KAAK,EAAEnB,KAAK,CAACkB,IAFR;AAGLE,UAAAA,GAAG,EAAEpB,KAAK,CAACoB,GAHN;AAILC,UAAAA,QAAQ,EAAEX,kBAAkB,CAACY;AAJxB,SAAP;AAMD,OAfD,CADc,CAAhB;AAkBD,KAxBP;AA0BA,WAAO,MAAMpB,MAAM,GAAG,IAAtB;AACH,GAjCQ,EAiCN,CAACX,MAAD,EAASD,WAAT,CAjCM,CAAT;AAqCA,sBAEE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,yBAArB;AAA+C,IAAA,KAAK,EAAE;AAAEyB,MAAAA,MAAM,EAAE;AAAV,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,WAAW,EAAC,sBAFd;AAGE,IAAA,KAAK,EAAExB,MAHT;AAKL,IAAA,QAAQ,EAAEgC,CAAC,IAAI/B,SAAS,CAAC+B,CAAC,CAACC,MAAF,CAASC,KAAV,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,eAQY;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjC,aAAa,CAACgB,GAAd,CAAkBT,KAAK,iBACtB,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,GAAG,EAAEA,KAAK,CAACoB,GAFb;AAGE,IAAA,WAAW,EAAErB,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CARZ,eAiBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAET,WAArB;AAAkC,IAAA,QAAQ,EAAEO,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEuB,GAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBZ,CAFF;AA2BH;;AAED,eAAehC,SAAf","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Affichage from \"./components/Affichage\";\r\nimport Album from \"./components/Widgets/Album\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport TrackSearchResult from \"./components/TrackSearchResult\"\r\nimport Player from \"./components/Player\"\r\n\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n clientId: \"6bc52007f6114854ad75a84a1d119b23\"\r\n})\r\n\r\nfunction Dashboard({code}) {\r\n\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [image, setImage] = useState(\"\")\r\n    const [playingTrack, setPlayingTrack] = useState()\r\n\r\n    function chooseTrack(track) {\r\n        setPlayingTrack(track)\r\n        setSearch('')\r\n    }\r\n\r\n    \r\n    \r\n    useEffect(() =>{\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n    \r\n    useEffect(() =>{\r\n        if(!search) return setSearchResults([])\r\n        if(!accessToken) return\r\n\r\n        let cancel = false\r\n\r\n        spotifyApi.searchTracks(search).then(res =>{\r\n            if(cancel) return\r\n           \r\n            /*console.log(res.body.tracks.items[0].album.images[0].url)\r\n            setImage( res.body.tracks.items[0].album.images[0].url)*/\r\n           \r\n                setSearchResults(\r\n                  res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                      (smallest, image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                      },\r\n                      track.album.images[0]\r\n                    )\r\n          \r\n                    return {\r\n                      artist: track.artists[0].name,\r\n                      title: track.name,\r\n                      uri: track.uri,\r\n                      albumUrl: smallestAlbumImage.url,\r\n                    }\r\n                  })\r\n                )\r\n              })\r\n        \r\n        return () => cancel = true\r\n    }, [search, accessToken])\r\n\r\n   \r\n\r\n    return (\r\n\r\n      <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>                      \r\n                  <Form.Control\r\n                    type=\"search\"\r\n                    placeholder=\"Search Songs/Artists\"\r\n                    value={search}\r\n                   \r\n             onChange={e => setSearch(e.target.value)}\r\n                  />\r\n                  <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n                    {searchResults.map(track => (\r\n                      <TrackSearchResult\r\n                        track={track}\r\n                        key={track.uri}\r\n                        chooseTrack={chooseTrack}\r\n                      />\r\n                    ))}              \r\n                  </div>\r\n                  <div>\r\n                    <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n                  </div>\r\n               \r\n                </Container>\r\n \r\n  )      \r\n      \r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}